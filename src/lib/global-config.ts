/**
 * Global Configuration System
 * Centralized configuration for permissions, commands, and documents
 */

import { CommandDefinition } from '@/features/agents/types/commands';
import { WorkspacePermissions } from '@/features/agents/types/permissions';

export interface PermissionSet {
  fileSystem: {
    read: string[];
    write: string[];
    execute: string[];
  };
  git: {
    allowedOperations: ('diff' | 'commit' | 'push' | 'branch' | 'status' | 'log' | 'show' | 'blame' | 'add' | 'stash' | 'checkout')[];
    protectedBranches: string[];
    requiresApproval: string[];
  };
  external: {
    allowedHosts: string[];
    apiKeys: Record<string, string>;
  };
  commands: {
    allowed: string[];
    requiresApproval: string[];
    forbidden: string[];
  };
  systemAccess: {
    canInstallPackages: boolean;
    canModifyEnvironment: boolean;
    canAccessNetwork: boolean;
    maxResourceUsage: {
      memory: number;
      cpu: number;
      disk: number;
    };
  };
}

export interface GlobalConfig {
  permissions: {
    defaults: PermissionSet;
    templates: Record<string, PermissionSet>;
    roleBasedDefaults: Record<string, PermissionSet>;
  };
  commands: {
    library: CommandDefinition[];
    categories: string[];
    hotKeys: Record<string, string>;
    globalCommands: Record<string, CommandDefinition>;
  };
  documents: {
    claudeMd: string;
    codingStandards: string;
    additionalContext: string[];
    templates: {
      claudeMdTemplate: string;
      permissionsTemplate: string;
      commandsTemplate: string;
    };
  };
  workspace: {
    defaultStructure: Record<string, any>;
    requiredFiles: string[];
    autoGeneratedFiles: string[];
  };
  security: {
    auditLogging: boolean;
    permissionEscalationDetection: boolean;
    anomalyDetection: boolean;
    alertThresholds: {
      failedPermissionChecks: number;
      suspiciousActivity: number;
      resourceUsage: number;
    };
  };
  system: {
    version: string;
    configVersion: string;
    lastUpdated: string;
    environment: 'development' | 'staging' | 'production';
  };
}

export class GlobalConfigManager {
  private static instance: GlobalConfigManager;
  private config: GlobalConfig | null = null;
  private configPath: string = '/home/nricoatarini/Project-Workspace/Context-Pipeline/storage/config/global-config.json';

  private constructor() {}

  static getInstance(): GlobalConfigManager {
    if (!GlobalConfigManager.instance) {
      GlobalConfigManager.instance = new GlobalConfigManager();
    }
    return GlobalConfigManager.instance;
  }

  /**
   * Load global configuration from file
   */
  async loadConfig(): Promise<GlobalConfig> {
    try {
      const fs = require('fs').promises;
      const configData = await fs.readFile(this.configPath, 'utf8');
      this.config = JSON.parse(configData);
      return this.config!;
    } catch (error) {
      console.warn('Failed to load global config, creating default:', error);
      return this.createDefaultConfig();
    }
  }

  /**
   * Save global configuration to file
   */
  async saveConfig(config: GlobalConfig): Promise<void> {
    try {
      const fs = require('fs').promises;
      const path = require('path');
      
      // Ensure directory exists
      await fs.mkdir(path.dirname(this.configPath), { recursive: true });
      
      // Update system info
      config.system.lastUpdated = new Date().toISOString();
      
      await fs.writeFile(this.configPath, JSON.stringify(config, null, 2));
      this.config = config;
    } catch (error) {
      console.error('Failed to save global config:', error);
      throw error;
    }
  }

  /**
   * Get current configuration
   */
  getConfig(): GlobalConfig | null {
    return this.config;
  }

  /**
   * Get permission set by template name
   */
  getPermissionTemplate(templateName: string): PermissionSet | null {
    if (!this.config) return null;
    return this.config.permissions.templates[templateName] || null;
  }

  /**
   * Get default permissions for a role
   */
  getRolePermissions(role: string): PermissionSet | null {
    if (!this.config) return null;
    return this.config.permissions.roleBasedDefaults[role] || this.config.permissions.defaults;
  }

  /**
   * Validate permission structure
   */
  validatePermissions(permissions: PermissionSet): boolean {
    try {
      // Basic validation
      if (!permissions.fileSystem || !permissions.git || !permissions.external) {
        return false;
      }
      
      if (!Array.isArray(permissions.fileSystem.read) || 
          !Array.isArray(permissions.fileSystem.write) || 
          !Array.isArray(permissions.fileSystem.execute)) {
        return false;
      }
      
      if (!Array.isArray(permissions.git.allowedOperations) || 
          !Array.isArray(permissions.git.protectedBranches) || 
          !Array.isArray(permissions.git.requiresApproval)) {
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Permission validation failed:', error);
      return false;
    }
  }

  /**
   * Create default configuration
   */
  private createDefaultConfig(): GlobalConfig {
    const defaultPermissions: PermissionSet = {
      fileSystem: {
        read: ['context/**', 'target/**', 'feedback/**'],
        write: ['target/**', 'feedback/**'],
        execute: ['target/**']
      },
      git: {
        allowedOperations: ['diff', 'status', 'log', 'show', 'blame', 'add', 'commit'],
        protectedBranches: ['main', 'master', 'production'],
        requiresApproval: ['push', 'branch', 'checkout']
      },
      external: {
        allowedHosts: ['api.github.com', 'api.openai.com'],
        apiKeys: {}
      },
      commands: {
        allowed: ['ls', 'cat', 'head', 'tail', 'grep', 'find', 'git', 'npm', 'node'],
        requiresApproval: ['rm', 'rmdir', 'mv', 'cp', 'chmod', 'chown'],
        forbidden: ['sudo', 'su', 'passwd', 'shutdown', 'reboot']
      },
      systemAccess: {
        canInstallPackages: false,
        canModifyEnvironment: false,
        canAccessNetwork: true,
        maxResourceUsage: {
          memory: 512, // MB
          cpu: 50,     // %
          disk: 100    // MB
        }
      }
    };

    const config: GlobalConfig = {
      permissions: {
        defaults: defaultPermissions,
        templates: {
          'developer': {
            ...defaultPermissions,
            fileSystem: {
              read: ['**'],
              write: ['target/**', 'feedback/**', 'src/**'],
              execute: ['target/**', 'scripts/**']
            },
            systemAccess: {
              ...defaultPermissions.systemAccess,
              canInstallPackages: true,
              canModifyEnvironment: true
            }
          },
          'reviewer': {
            ...defaultPermissions,
            fileSystem: {
              read: ['**'],
              write: ['feedback/**'],
              execute: []
            },
            git: {
              allowedOperations: ['diff', 'status', 'log', 'show', 'blame'],
              protectedBranches: ['main', 'master', 'production'],
              requiresApproval: ['add', 'commit', 'push', 'branch', 'checkout']
            }
          },
          'analyst': {
            ...defaultPermissions,
            fileSystem: {
              read: ['**'],
              write: ['feedback/**'],
              execute: []
            },
            commands: {
              allowed: ['ls', 'cat', 'head', 'tail', 'grep', 'find', 'git'],
              requiresApproval: ['npm', 'node'],
              forbidden: ['rm', 'rmdir', 'mv', 'cp', 'chmod', 'chown', 'sudo', 'su']
            }
          }
        },
        roleBasedDefaults: {
          'developer': defaultPermissions,
          'reviewer': defaultPermissions,
          'analyst': defaultPermissions
        }
      },
      commands: {
        library: [],
        categories: ['analysis', 'development', 'testing', 'deployment'],
        hotKeys: {
          '/test': 'run_tests',
          '/commit': 'git_commit',
          '/deploy': 'deploy_changes',
          '/analyze': 'analyze_code',
          '/review': 'review_changes'
        },
        globalCommands: {}
      },
      documents: {
        claudeMd: 'Default Claude.md content',
        codingStandards: 'Default coding standards',
        additionalContext: [],
        templates: {
          claudeMdTemplate: `# Claude AI Assistant Context

## Workspace Overview
This workspace contains: {{WORKSPACE_DESCRIPTION}}

## Current Task
{{CURRENT_TASK}}

## Permissions
{{PERMISSIONS_SUMMARY}}

## Available Commands
{{COMMANDS_LIST}}

## Context Files
{{CONTEXT_FILES}}

## Coding Standards
{{CODING_STANDARDS}}
`,
          permissionsTemplate: `{
  "workspaceId": "{{WORKSPACE_ID}}",
  "permissions": {{PERMISSIONS_JSON}},
  "generated": "{{TIMESTAMP}}",
  "version": "1.0"
}`,
          commandsTemplate: `{
  "workspaceId": "{{WORKSPACE_ID}}",
  "commands": {{COMMANDS_JSON}},
  "hotKeys": {{HOTKEYS_JSON}},
  "generated": "{{TIMESTAMP}}",
  "version": "1.0"
}`
        }
      },
      workspace: {
        defaultStructure: {
          'context/': 'Context files and imports',
          'target/': 'Target files for modification',
          'feedback/': 'Agent feedback and reports',
          'agents/': 'Agent configurations and state'
        },
        requiredFiles: ['workspace.json', 'README.md'],
        autoGeneratedFiles: ['CLAUDE.md', 'permissions.json', 'commands.json']
      },
      security: {
        auditLogging: true,
        permissionEscalationDetection: true,
        anomalyDetection: true,
        alertThresholds: {
          failedPermissionChecks: 5,
          suspiciousActivity: 3,
          resourceUsage: 80
        }
      },
      system: {
        version: '1.0.0',
        configVersion: '1.0',
        lastUpdated: new Date().toISOString(),
        environment: 'development'
      }
    };

    this.config = config;
    return config;
  }

  /**
   * Merge permissions with defaults
   */
  mergeWithDefaults(permissions: Partial<PermissionSet>): PermissionSet {
    const defaults = this.config?.permissions.defaults || this.createDefaultConfig().permissions.defaults;
    
    return {
      fileSystem: {
        ...defaults.fileSystem,
        ...permissions.fileSystem
      },
      git: {
        ...defaults.git,
        ...permissions.git
      },
      external: {
        ...defaults.external,
        ...permissions.external
      },
      commands: {
        ...defaults.commands,
        ...permissions.commands
      },
      systemAccess: {
        ...defaults.systemAccess,
        ...permissions.systemAccess
      }
    };
  }

  /**
   * Check if a permission is allowed
   */
  isPermissionAllowed(permissions: PermissionSet, operation: string, target: string): boolean {
    try {
      switch (operation) {
        case 'read':
          return permissions.fileSystem.read.some(pattern => this.matchesPattern(target, pattern));
        case 'write':
          return permissions.fileSystem.write.some(pattern => this.matchesPattern(target, pattern));
        case 'execute':
          return permissions.fileSystem.execute.some(pattern => this.matchesPattern(target, pattern));
        case 'git':
          return permissions.git.allowedOperations.includes(target as any);
        case 'command':
          return permissions.commands.allowed.includes(target) && 
                 !permissions.commands.forbidden.includes(target);
        default:
          return false;
      }
    } catch (error) {
      console.error('Permission check failed:', error);
      return false;
    }
  }

  /**
   * Simple pattern matching for file paths
   */
  private matchesPattern(path: string, pattern: string): boolean {
    if (pattern === '**') return true;
    if (pattern.endsWith('/**')) {
      const basePath = pattern.slice(0, -3);
      return path.startsWith(basePath);
    }
    if (pattern.includes('*')) {
      const regex = new RegExp(pattern.replace(/\*/g, '.*'));
      return regex.test(path);
    }
    return path === pattern;
  }
}

export default GlobalConfigManager;