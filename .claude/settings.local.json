{
  "permissions": {
    "allow": [
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(npm install:*)",
      "Bash(node:*)",
      "Bash(curl:*)",
      "Bash(apt list:*)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(npm uninstall:*)",
      "Bash(rm:*)",
      "Bash(true)",
      "Bash(git checkout:*)",
      "Bash(git push:*)",
      "Bash(find:*)",
      "Bash(chmod:*)",
      "Bash(git branch:*)",
      "Bash(for branch in feature/permissions-system feature/checkpoint-system feature/git-operations feature/context-import feature/ui-improvements)",
      "Bash(do echo \"=== $branch ===\")",
      "Bash(git log:*)",
      "Bash(echo)",
      "Bash(done)",
      "Bash(mkdir:*)",
      "Bash(grep:*)",
      "Bash(git add:*)",
      "Bash(git fetch:*)",
      "Bash(lsof:*)",
      "Bash(pkill:*)",
      "Bash(kill:*)",
      "Bash(git restore:*)",
      "Bash(npm run dev:*)",
      "Bash(NODE_ENV=test node -e \"\nconst { NextRequest, NextResponse } = require('next/server');\nconst path = require('path');\n\n// Test the workspace creation directly\nconst testWorkspaceCreation = async () => {\n  try {\n    // Mock request\n    const body = {\n      action: 'publish',\n      workspaceDraft: {\n        id: 'test-permission-system',\n        name: 'Test Permission System',\n        description: 'Testing permission injection system',\n        context_items: [{\n          id: 'test-item-1',\n          title: 'Test Context Item',\n          source: 'jira',\n          preview: 'This is a test context item',\n          metadata: {}\n        }]\n      }\n    };\n\n    // Set up test path\n    const WORKSPACE_BASE_DIR = path.join(process.cwd(), 'storage', 'workspaces');\n    const workspacePath = path.join(WORKSPACE_BASE_DIR, 'test-permission-system');\n    \n    console.log('Testing workspace creation...');\n    console.log('Workspace path:', workspacePath);\n    console.log('Request body:', JSON.stringify(body, null, 2));\n    \n    console.log('✅ Test setup successful - API should work when server is running');\n    \n  } catch (error) {\n    console.error('❌ Test failed:', error);\n  }\n};\n\ntestWorkspaceCreation();\n\")",
      "Bash(ls:*)",
      "Bash(sed:*)",
      "Bash(npx tsc:*)",
      "Bash(timeout 10 npm run dev:*)",
      "Bash(awk:*)",
      "Bash(timeout 30 npm run dev:*)",
      "Bash(mv:*)",
      "Bash(rg:*)",
      "Bash(pgrep:*)",
      "Bash(cat:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(timeout 10s npm run dev)",
      "Bash(# Create a comprehensive search for orphaned components\necho \"Checking for orphaned components...\"\necho \"==================================\"\n\n# List of all component files\ncomponents=(\n  \"src/components/LazyWrapper.tsx\"\n  \"src/components/ThemeSelector.tsx\"\n  \"src/components/LazyTestComponent.tsx\"\n  \"src/components/SetupWizard.tsx\"\n  \"src/components/CredentialsManager.tsx\"\n  \"src/features/git/components/GitDiffViewer.tsx\"\n  \"src/features/workspaces/components/WorkspaceValidationAlert.tsx\"\n  \"src/features/workspaces/components/WorkspaceStage.tsx\"\n  \"src/features/context-library/components/ArchiveManager.tsx\"\n  \"src/features/agents/components/AgentStatusIndicator.tsx\"\n  \"src/features/agents/components/terminal/ToolExecutionTracker.tsx\"\n  \"src/features/agents/components/terminal/ToolApprovalOverlay.tsx\"\n  \"src/features/workspace-workshop/components/WorkspaceSelectionView.tsx\"\n  \"src/features/workspace-workshop/components/FileContextMenu.tsx\"\n  \"src/features/workspace-workshop/components/AgentStatusIndicator.tsx\"\n  \"src/features/agents/components/CommandPalette.tsx\"\n  \"src/features/agents/components/AgentOverlay.tsx\"\n  \"src/features/workspace-workshop/components/TriggersModal.tsx\"\n  \"src/features/agents/components/terminal/TerminalModal.tsx\"\n  \"src/features/context-library/components/LibraryCard.tsx\"\n  \"src/features/workspace-workshop/components/FileTree.tsx\"\n  \"src/features/workspace-workshop/components/FileSearchPanel.tsx\"\n  \"src/features/context-library/components/LibraryStage.tsx\"\n  \"src/features/workspace-workshop/components/WorkspaceSidebar.tsx\"\n  \"src/features/workspace-workshop/components/LibraryView.tsx\"\n  \"src/features/workspace-workshop/components/WorkspaceHeader.tsx\"\n  \"src/features/workspace-workshop/components/FileTabs.tsx\"\n  \"src/features/workspace-workshop/components/TerminalArea.tsx\"\n  \"src/features/workspace-workshop/components/MonacoEditorArea.tsx\"\n  \"src/features/agents/components/CommandInjector.tsx\"\n  \"src/features/agents/components/CommandEditor.tsx\"\n  \"src/features/agents/components/terminal/ChatInterface.tsx\"\n  \"src/features/workspace-workshop/components/AgentManagementModal.tsx\"\n  \"src/features/workspaces/components/WorkspaceDraftCard.tsx\"\n  \"src/features/workspaces/components/WorkspaceDrafts.tsx\"\n  \"src/features/workspace-workshop/components/ActiveWorkspaceView.tsx\"\n  \"src/features/workspaces/components/AgentConfigurationModal.tsx\"\n  \"src/features/workspace-workshop/components/WorkspaceWorkshop.tsx\"\n  \"src/features/context-import/components/ImportModal.tsx\"\n  \"src/features/context-import/components/CredentialSelector.tsx\"\n  \"src/features/workspaces/components/WorkspaceCard.tsx\"\n  \"src/features/workspace-workshop/components/CompactWorkspaceCard.tsx\"\n)\n\n# Check each component\nfor component_path in \"${components[@]}\"; do\n  component_name=$(basename \"$component_path\" .tsx)\n  \n  # Search for imports of this component (excluding its own file)\n  import_count=$(rg -l \"import.*${component_name}.*from\" src --glob \"*.{ts,tsx,js,jsx}\" | grep -v \"$component_path\" | wc -l)\n  \n  if [ \"$import_count\" -eq 0 ]; then\n    echo \"ORPHANED: $component_path\"\n    echo \"  Component: $component_name\"\n    echo \"\"\n  fi\ndone)",
      "Bash(# More thorough search for specific components that seem like they should be used\necho \"Double-checking potentially false positives...\"\necho \"============================================\"\n\n# Check for FileTree (might be used in workspace components)\necho \"FileTree imports:\"\nrg -n \"FileTree\" src --glob \"*.{ts,tsx}\" | grep -v \"src/features/workspace-workshop/components/FileTree.tsx\"\necho \"\"\n\n# Check for MonacoEditorArea\necho \"MonacoEditorArea imports:\"\nrg -n \"MonacoEditorArea\" src --glob \"*.{ts,tsx}\" | grep -v \"src/features/workspace-workshop/components/MonacoEditorArea.tsx\"\necho \"\"\n\n# Check for ActiveWorkspaceView\necho \"ActiveWorkspaceView imports:\"\nrg -n \"ActiveWorkspaceView\" src --glob \"*.{ts,tsx}\" | grep -v \"src/features/workspace-workshop/components/ActiveWorkspaceView.tsx\"\necho \"\"\n\n# Check for WorkspaceSelectionView\necho \"WorkspaceSelectionView imports:\"\nrg -n \"WorkspaceSelectionView\" src --glob \"*.{ts,tsx}\" | grep -v \"src/features/workspace-workshop/components/WorkspaceSelectionView.tsx\"\necho \"\")",
      "Bash(chromium-browser:*)",
      "Bash(PUPPETEER_HEADFUL=true node scripts/puppeteer-tests/real-workspace-agent-test.js)",
      "Bash(WORKSPACE_DIR=\"storage/workspaces/draft-1751949713177-ewohpfesi-repo-Evpatarini-DavinEPV2/target\")",
      "mcp__puppeteer__puppeteer_navigate",
      "Bash(npx puppeteer browsers:*)",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_click",
      "mcp__puppeteer__puppeteer_evaluate",
      "mcp__puppeteer__puppeteer_select",
      "Bash(NODE_PATH=./src node -r @babel/register scripts/test-command-regeneration.js)",
      "Bash(npm run type-check:*)",
      "Bash(od:*)",
      "Bash(npx eslint:*)",
      "Bash(npx next build:*)",
      "Bash(ssh-add:*)",
      "Bash(for dir in draft-*/)",
      "Bash(do echo -n \"$dir: \")",
      "Bash(jq:*)",
      "Bash(./scripts/prepare-commits.sh:*)",
      "Bash(./prepare-commit-2.sh)",
      "Bash(git reset:*)",
      "Bash(./prepare-commit-3.sh)",
      "Bash(./prepare-commit-4.sh)",
      "Bash(git check-ignore:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(./install-chrome.sh:*)",
      "mcp__puppeteer__puppeteer_fill",
      "Bash(timeout:*)",
      "Bash(echo $DISPLAY)",
<<<<<<< Updated upstream
      "Bash(git remote set-url:*)",
      "Bash(ssh:*)",
      "Bash(GIT_SSH_COMMAND=\"ssh -v\" git push origin workspace/test-workspace-comprehensive-2025-07-11)"
=======
      "Bash(git remote get-url:*)",
      "Bash(ssh:*)",
      "Bash(git remote set-url:*)",
      "Bash(GIT_SSH_COMMAND=\"ssh -i ~/.ssh/id_ed25519_secondary\" git push origin workspace/test-workspace-comprehensive-2025-07-11)",
      "Bash(GIT_SSH_COMMAND=\"ssh -i ~/.ssh/id_ed25519_secondary\" git pull origin workspace/test-workspace-comprehensive-2025-07-11)",
      "Bash(git stash:*)"
>>>>>>> Stashed changes
    ],
    "deny": []
  }
}