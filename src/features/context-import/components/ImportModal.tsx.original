/**
 * Import Modal Component
 * Contains the import functionality from external sources
 */
'use client';
import { useState, useEffect } from 'react';
import { SOURCE_CONFIG } from '@/features/context-import/types';
interface ImportModalProps {
    isOpen: boolean;
    onClose: () => void;
    onImportComplete?: () => void;
}
export function ImportModal({ isOpen, onClose, onImportComplete }: ImportModalProps) {
    const [selectedSource, setSelectedSource] = useState('file');
    const [queries, setQueries] = useState<{templates: {popular: Array<{id: string, name: string, description: string, query: string}>, all: any[]}} | null>(null);
    const [loading, setLoading] = useState(false);
    const [selectedQuery, setSelectedQuery] = useState<{id: string, name: string, description: string, query: string} | null>(null);
    const [customQuery, setCustomQuery] = useState('');
    const [showCustomForm, setShowCustomForm] = useState(false);
    const [importResults, setImportResults] = useState<{success: boolean, source: string, error?: string, items: any[], total: number} | null>(null);
    const [importing, setImporting] = useState(false);
    const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());
    const [addingToLibrary, setAddingToLibrary] = useState<Set<string>>(new Set());
    const [libraryItems, setLibraryItems] = useState<Set<string>>(new Set());
    const [selectedImportItems, setSelectedImportItems] = useState<Set<string>>(new Set());
    // File and text import states
    const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
    const [textContent, setTextContent] = useState('');
    const [textTitle, setTextTitle] = useState('');
    const [textFormat, setTextFormat] = useState('auto');
    const [showTextImport, setShowTextImport] = useState(false);
    const [dragActive, setDragActive] = useState(false);
    const loadQueries = async (source: string) => {
        setLoading(true);
        try {
            const response = await fetch(`/api/context-workflow/queries/${source}`);
            const data = await response.json();
            setQueries(data.queries);
        } catch (error) {
            console.error('Failed to load queries:', error);
        }
        setLoading(false);
    };
    useEffect(() => {
        if (isOpen) {
            if (selectedSource !== 'file') {
                loadQueries(selectedSource);
            }
            setSelectedQuery(null);
            setShowCustomForm(false);
            setSelectedFiles([]);
            setTextContent('');
            setTextTitle('');
            setShowTextImport(false);
        }
    }, [selectedSource, isOpen]);
    // Load existing library items on mount
    useEffect(() => {
        if (isOpen) {
            try {
                const existingLibrary = JSON.parse(localStorage.getItem('context-library') || '[]');
                const existingIds = new Set<string>(existingLibrary.map((item: any) => item.id as string));
                setLibraryItems(existingIds);
            } catch (error) {
                console.error('Failed to load library items:', error);
            }
        }
    }, [isOpen]);
    const handleQuerySelect = (template: any) => {
        setSelectedQuery(template);
        setCustomQuery(template.query);
        setShowCustomForm(false);
    };
    const handleCustomQuery = () => {
        setShowCustomForm(true);
        setSelectedQuery(null);
        setCustomQuery('');
    };
    const executeQuery = async () => {
        if (selectedSource === 'file') {
            await handleFileImport();
        } else {
            await handleRegularImport();
        }
    };
    const handleRegularImport = async () => {
        if (!customQuery.trim()) return;
        setImporting(true);
        setImportResults(null);
        try {
            console.log('Executing query:', customQuery);
            const response = await fetch('/api/context-workflow/import', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    source: selectedSource,
                    searchParams: customQuery
                })
            });
            const result = await response.json();
            console.log('Import result:', result);
            setImportResults(result);
        } catch (error) {
            console.error('Import failed:', error);
            setImportResults({
                success: false,
                source: selectedSource,
                error: `Failed to execute query: ${(error as Error).message}`,
                items: [],
                total: 0
            });
        } finally {
            setImporting(false);
        }
    };
    const handleFileImport = async () => {
        if (selectedFiles.length === 0 && !textContent.trim()) {
            alert('Please select files or enter text content');
            return;
        }
        setImporting(true);
        setImportResults(null);
        try {
            let result;
            if (selectedFiles.length > 0) {
                // Handle file upload
                const formData = new FormData();
                selectedFiles.forEach(file => {
                    formData.append('files', file);
                });
                const response = await fetch('/api/context-workflow/import/file', {
                    method: 'POST',
                    body: formData
                });
                result = await response.json();
            } else {
                // Handle text import
                const response = await fetch('/api/context-workflow/import/file', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        content: textContent,
                        title: textTitle,
                        format: textFormat
                    })
                });
                result = await response.json();
            }
            console.log('File/Text import result:', result);
            setImportResults(result);
        } catch (error) {
            console.error('File/Text import failed:', error);
            setImportResults({
                success: false,
                source: 'file',
                error: `Failed to import: ${(error as Error).message}`,
                items: [],
                total: 0
            });
        } finally {
            setImporting(false);
        }
    };
    const toggleItemExpansion = (itemId: string) => {
        const newExpanded = new Set(expandedItems);
        if (newExpanded.has(itemId)) {
            newExpanded.delete(itemId);
        } else {
            newExpanded.add(itemId);
        }
        setExpandedItems(newExpanded);
    };
    const addToLibrary = async (item: any) => {
        const itemId = item.id;
        setAddingToLibrary(prev => new Set([...prev, itemId]));
        try {
            console.log('Adding to Library:', item);
            
            // Handle Git repositories - prompt for clone mode if not specified
            if (item.source === 'git' && !item.clone_mode) {
                const cloneMode = window.prompt(
                    `How would you like to add "${item.title}"?\n\n` +
                    '1 = Read-Only (for reference)\n' +
                    '2 = Write Access (for development)\n' +
                    '3 = Both (add twice)',
                    '2' // Default to writeable for individual adds
                );
                if (cloneMode === '1') {
                    item.clone_mode = 'read-only';
                } else if (cloneMode === '2') {
                    item.clone_mode = 'writeable';
                } else if (cloneMode === '3') {
                    // Add read-only version first
                    await addToLibrary({...item, clone_mode: 'read-only'});
                    // Then add writeable version
                    item.clone_mode = 'writeable';
                } else {
                    // User cancelled
                    setAddingToLibrary(prev => {
                        const newSet = new Set(prev);
                        newSet.delete(itemId);
                        return newSet;
                    });
                    return;
                }
            }
            // For now, use localStorage as a simple library
            const existingLibrary = JSON.parse(localStorage.getItem('context-library') || '[]');
            // Check if item already exists with same clone mode
            const duplicateKey = `${item.id}-${item.clone_mode || 'context-only'}`;
            const exists = existingLibrary.some((libItem: any) =>
                `${libItem.id}-${libItem.library_metadata?.clone_mode || 'context-only'}` === duplicateKey
            );
            if (exists) {
                const modeText = item.clone_mode ? ` (${item.clone_mode})` : '';
                // console.log removed - contained sensitive data;
                alert(`Item already in library${modeText}!`);
                return;
            }
            // console.log removed - contained sensitive data;
            // Validate item before adding to library
            if (!item || !item.id || !item.title || !item.source ||
                typeof item.id !== 'string' || typeof item.title !== 'string' ||
                item.id === 'undefined' || item.title === 'undefined' || item.source === 'undefined') {
                console.error('‚ùå Skipping invalid item:', item);
                return;
            }
            // Add to library with metadata
            const libraryItem = {
                ...item,
                library_metadata: {
                    added_at: new Date().toISOString(),
                    status: 'active',
                    clone_mode: item.clone_mode || 'context-only' // Track clone mode
                }
            };
            existingLibrary.push(libraryItem);
            // Store lightweight version in localStorage to avoid quota issues
            try {
                const lightweightLibrary = existingLibrary
                    .filter((item: any) => item && item.id && item.title && item.source &&
                            typeof item.id === 'string' && item.id !== 'undefined' &&
                            item.title !== 'undefined' && item.source !== 'undefined')
                    .map((item: any) => ({
                        id: item.id,
                        title: item.title,
                        source: item.source,
                        type: item.type,
                        preview: item.preview?.substring(0, 200) + '...' || '',
                        tags: item.tags?.slice(0, 3) || [],
                        added_at: item.added_at,
                        size_bytes: item.size_bytes,
                        library_metadata: item.library_metadata
                    }));
                localStorage.setItem('context-library', JSON.stringify(lightweightLibrary));
            } catch (quotaError) {
                console.warn('‚ö†Ô∏è localStorage quota exceeded, relying on storage sync');
            }
            // Update UI state to remove from import list
            setLibraryItems(prev => new Set([...prev, item.id]));
            // Sync to file system periodically
            syncToFileSystem(existingLibrary);
            console.log('‚úÖ Added to Library:', libraryItem.id);
            const modeText = item.clone_mode === 'writeable' ? ' (Write Access)' :
                            item.clone_mode === 'read-only' ? ' (Read-Only)' : '';
            alert(`‚úÖ Added "${item.title}" to library${modeText}!`);
            // Trigger callback to refresh library
            onImportComplete?.();
        } catch (error) {
            console.error('‚ùå Library add failed:', error);
            alert('‚ùå Failed to add to library');
        } finally {
            setAddingToLibrary(prev => {
                const newSet = new Set(prev);
                newSet.delete(itemId);
                return newSet;
            });
        }
    };
    const syncToFileSystem = async (libraryData: any[]) => {
        try {
            console.log('üîÑ Syncing library to file system...');
            const response = await fetch('/api/context-workflow/library', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'sync',
                    libraryData: libraryData
                })
            });
            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Library synced to file system:', result.itemCount, 'items');
            } else {
                console.error('‚ùå Failed to sync library:', result.error);
            }
        } catch (error) {
            console.error('‚ùå Sync failed:', error);
        }
    };
    const extractJiraDescription = (item: any) => {
        const desc = item.content?.description;
        if (!desc || typeof desc !== 'object') return null;
        // Extract text from JIRA document structure
        const extractText = (content: any): string => {
            if (!content) return '';
            if (typeof content === 'string') return content;
            if (content.text) return content.text;
            if (content.content && Array.isArray(content.content)) {
                return content.content.map(extractText).join(' ');
            }
            return '';
        };
        return extractText(desc);
    };
    // File handling functions
    const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
        const files = event.target.files;
        if (files) {
            setSelectedFiles(Array.from(files));
        }
    };
    const handleDragOver = (e: React.DragEvent) => {
        e.preventDefault();
        setDragActive(true);
    };
    const handleDragLeave = (e: React.DragEvent) => {
        e.preventDefault();
        setDragActive(false);
    };
    const handleDrop = (e: React.DragEvent) => {
        e.preventDefault();
        setDragActive(false);
        const files = e.dataTransfer.files;
        if (files) {
            setSelectedFiles(Array.from(files));
        }
    };
    const removeFile = (index: number) => {
        setSelectedFiles(files => files.filter((_, i) => i !== index));
    };
    const formatFileSize = (bytes: number): string => {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
            {/* Backdrop */}
            <div
                className="absolute inset-0 bg-black bg-opacity-50"
                onClick={onClose}
            />
            {/* Modal */}
            <div className="relative bg-white rounded-lg shadow-2xl w-[95vw] h-[90vh] max-w-6xl flex flex-col">
                {/* Header */}
                <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200">
                    <h2 className="text-xl font-semibold text-gray-900">Import from Source</h2>
                    <button
                        onClick={onClose}
                        className="text-gray-400 hover:text-gray-600 text-xl"
                    >
                        √ó
                    </button>
                </div>
                {/* Content */}
                <div className="flex-1 overflow-y-auto p-6">
                    {/* Source Selection */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 mb-6">
                        {SOURCE_CONFIG.map(source => (
                            <button
                                key={source.type}
                                className={`p-3 rounded-lg border-2 transition-colors text-left ${
                                    selectedSource === source.type
                                        ? 'border-blue-500 bg-blue-50'
                                        : 'border-gray-200 hover:border-gray-300'
                                }`}
                                onClick={() => setSelectedSource(source.type)}
                            >
                                <div className="text-xl mb-1">{source.icon}</div>
                                <div className="font-medium text-gray-900 text-sm">{source.name}</div>
                                <div className="text-xs text-gray-600">{source.description}</div>
                            </button>
                        ))}
                    </div>
                    {selectedSource === 'file' ? (
                        /* File Upload Interface */
                        <div className="space-y-6">
                            <div className="flex items-center justify-between">
                                <h4 className="font-medium text-gray-900">Import Method</h4>
                                <div className="flex gap-2">
                                    <button
                                        onClick={() => setShowTextImport(false)}
                                        className={`text-sm px-3 py-1 rounded-lg transition-colors ${
                                            !showTextImport
                                                ? 'bg-blue-100 text-blue-800'
                                                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                        }`}
                                    >
                                        Upload Files
                                    </button>
                                    <button
                                        onClick={() => setShowTextImport(true)}
                                        className={`text-sm px-3 py-1 rounded-lg transition-colors ${
                                            showTextImport
                                                ? 'bg-blue-100 text-blue-800'
                                                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                        }`}
                                    >
                                        Paste Text
                                    </button>
                                </div>
                            </div>
                            {!showTextImport ? (
                                /* File Upload */
                                <div className="space-y-4">
                                    <div
                                        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                                            dragActive
                                                ? 'border-blue-500 bg-blue-50'
                                                : 'border-gray-300 hover:border-gray-400'
                                        }`}
                                        onDragOver={handleDragOver}
                                        onDragLeave={handleDragLeave}
                                        onDrop={handleDrop}
                                    >
                                        <div className="text-4xl mb-4">‚ñ°</div>
                                        <p className="text-lg font-medium text-gray-900 mb-2">
                                            Drop files here or click to browse
                                        </p>
                                        <p className="text-sm text-gray-600 mb-4">
                                            Supports: Text, Markdown, JSON, PDF, Word docs, Images
                                        </p>
                                        <input
                                            type="file"
                                            multiple
                                            accept=".txt,.md,.json,.pdf,.docx,.jpg,.jpeg,.png,.gif,.webp"
                                            onChange={handleFileSelect}
                                            className="hidden"
                                            id="file-upload"
                                        />
                                        <label
                                            htmlFor="file-upload"
                                            className="inline-block bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg cursor-pointer transition-colors"
                                        >
                                            Select Files
                                        </label>
                                    </div>
                                    {selectedFiles.length > 0 && (
                                        <div className="space-y-2">
                                            <h5 className="font-medium text-gray-900">Selected Files:</h5>
                                            {selectedFiles.map((file, index) => (
                                                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                                    <div className="flex items-center gap-3">
                                                        <div className="text-xl">
                                                            {file.type.startsWith('image/') ? 'IMG' :
                                                             file.type.includes('pdf') ? 'PDF' :
                                                             file.type.includes('word') ? 'DOC' : 'FILE'}
                                                        </div>
                                                        <div>
                                                            <div className="font-medium text-gray-900 text-sm">{file.name}</div>
                                                            <div className="text-xs text-gray-600">{formatFileSize(file.size)}</div>
                                                        </div>
                                                    </div>
                                                    <button
                                                        onClick={() => removeFile(index)}
                                                        className="text-red-600 hover:text-red-800 text-sm"
                                                    >
                                                        ‚úï
                                                    </button>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </div>
                            ) : (
                                /* Text Input */
                                <div className="space-y-4">
                                    <div className="grid grid-cols-2 gap-4">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Title (optional)
                                            </label>
                                            <input
                                                type="text"
                                                value={textTitle}
                                                onChange={(e) => setTextTitle(e.target.value)}
                                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                                placeholder="Enter a title for your text"
                                            />
                                        </div>
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Format
                                            </label>
                                            <select
                                                value={textFormat}
                                                onChange={(e) => setTextFormat(e.target.value)}
                                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                            >
                                                <option value="auto">Auto-detect</option>
                                                <option value="plain">Plain Text</option>
                                                <option value="markdown">Markdown</option>
                                                <option value="json">JSON</option>
                                                <option value="code">Code</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            Content
                                        </label>
                                        <textarea
                                            value={textContent}
                                            onChange={(e) => setTextContent(e.target.value)}
                                            className="w-full h-48 p-3 border border-gray-300 rounded-lg font-mono text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                            placeholder="Paste your text content here..."
                                        />
                                    </div>
                                    <div className="text-xs text-gray-500">
                                        {textContent.length.toLocaleString()} characters
                                    </div>
                                </div>
                            )}
                            <div className="flex gap-2">
                                <button
                                    onClick={executeQuery}
                                    disabled={(!showTextImport && selectedFiles.length === 0) || (showTextImport && !textContent.trim()) || importing}
                                    className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 text-white px-4 py-2 rounded-lg transition-colors text-sm font-medium"
                                >
                                    {importing ? 'Importing...' :
                                     !showTextImport ? 'Upload Files' : 'Import Text'}
                                </button>
                                <button
                                    onClick={() => {
                                        setSelectedFiles([]);
                                        setTextContent('');
                                        setTextTitle('');
                                    }}
                                    className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm"
                                >
                                    Clear
                                </button>
                            </div>
                        </div>
                    ) : (
                        /* Regular Query Interface */
                        <div className="grid lg:grid-cols-2 gap-6">
                            {/* Query Templates */}
                            <div>
                                {loading ? (
                                    <div className="text-center py-8 text-gray-500">Loading queries...</div>
                                ) : queries ? (
                                    <div>
                                        <div className="flex items-center justify-between mb-3">
                                            <h4 className="font-medium text-gray-900">
                                                Popular Queries for {selectedSource.toUpperCase()}
                                            </h4>
                                            <button
                                                onClick={handleCustomQuery}
                                                className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded-lg transition-colors"
                                            >
                                                Custom Query
                                            </button>
                                        </div>
                                        <div className="space-y-2 max-h-80 overflow-y-auto">
                                            {queries.templates.popular.map((template: any) => (
                                                <button
                                                    key={template.id}
                                                    onClick={() => handleQuerySelect(template)}
                                                    className={`w-full p-3 border rounded-lg text-left transition-colors ${
                                                        selectedQuery?.id === template.id
                                                            ? 'border-blue-500 bg-blue-50'
                                                            : 'border-gray-200 hover:bg-gray-50'
                                                    }`}
                                                >
                                                    <div className="font-medium text-gray-900 text-sm">{template.name}</div>
                                                    <div className="text-xs text-gray-600 mb-2">{template.description}</div>
                                                    <div className="text-xs font-mono text-gray-500 bg-gray-100 p-1 rounded">
                                                        {template.query.substring(0, 60)}...
                                                    </div>
                                                </button>
                                            ))}
                                        </div>
                                        <div className="mt-3 text-xs text-gray-500">
                                            {queries.templates.all.length} templates available
                                        </div>
                                    </div>
                                ) : (
                                    <div className="text-center py-8 text-gray-500">No queries available</div>
                                )}
                            </div>
                            {/* Query Editor & Execution */}
                            <div>
                                <h4 className="font-medium text-gray-900 mb-3">
                                    {selectedQuery ? `Selected: ${selectedQuery.name}` : showCustomForm ? 'Custom Query' : 'Select or Create Query'}
                                </h4>
                                {(selectedQuery || showCustomForm) ? (
                                    <div className="space-y-4">
                                        <div>
                                            <label className="block text-sm font-medium mb-2" style={{ color: 'var(--color-text-primary)' }}>
                                                Query ({selectedSource.toUpperCase()} syntax)
                                            </label>
                                            <textarea
                                                value={customQuery}
                                                onChange={(e) => setCustomQuery(e.target.value)}
                                                className="w-full h-32 p-3 border rounded-lg font-mono text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                                style={{
                                                    backgroundColor: 'var(--color-surface)',
                                                    borderColor: 'var(--color-border)',
                                                    color: 'var(--color-text-primary)',
                                                }}
                                                placeholder={SOURCE_CONFIG.find(s => s.type === selectedSource)?.placeholder}
                                            />
                                        </div>
                                        {selectedQuery && (
                                            <div className="text-xs text-gray-600 bg-gray-50 p-2 rounded">
                                                <strong>About:</strong> {selectedQuery.description}
                                            </div>
                                        )}
                                        <div className="flex gap-2">
                                            <button
                                                onClick={executeQuery}
                                                disabled={!customQuery.trim() || importing}
                                                className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 text-white px-4 py-2 rounded-lg transition-colors text-sm font-medium"
                                            >
                                                {importing ? 'Importing...' : 'Execute Query'}
                                            </button>
                                            <button
                                                onClick={() => {
                                                    setSelectedQuery(null);
                                                    setShowCustomForm(false);
                                                    setCustomQuery('');
                                                }}
                                                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm"
                                            >
                                                Clear
                                            </button>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="text-center py-12 text-gray-500">
                                        <div className="text-4xl mb-2">‚óâ</div>
                                        <p>Select a pre-made query or create a custom one to get started</p>
                                    </div>
                                )}
                            </div>
                        </div>
                    )}
                    {/* Import Results */}
                    {importResults && (
                        <div className="mt-6 border-t pt-6">
                            <div className="flex justify-between items-center mb-3">
                                <h4 className="font-medium text-gray-900">Import Results</h4>
                                {selectedImportItems.size > 0 && (
                                    <div className="flex items-center gap-3">
                                        <span className="text-sm text-gray-600">
                                            {selectedImportItems.size} selected
                                        </span>
                                        <button
                                            onClick={async () => {
                                                const itemsToAdd = importResults.items.filter((item: any) =>
                                                    selectedImportItems.has(item.id) && !libraryItems.has(item.id)
                                                );
                                                // Check if any are Git repos
                                                const gitItems = itemsToAdd.filter((item: any) => item.source === 'git');
                                                const nonGitItems = itemsToAdd.filter((item: any) => item.source !== 'git');
                                                // Add non-git items directly
                                                for (const item of nonGitItems) {
                                                    await addToLibrary(item);
                                                }
                                                // Handle Git items with clone mode selection
                                                if (gitItems.length > 0) {
                                                    const cloneMode = window.prompt(
                                                        `You have ${gitItems.length} Git repository(ies) selected.\n\n` +
                                                        'How would you like to add them?\n\n' +
                                                        '1 = Read-Only (for reference)\n' +
                                                        '2 = Write Access (for development)\n' +
                                                        '3 = Both (add twice)',
                                                        '1'
                                                    );
                                                    if (cloneMode === '1' || cloneMode === '3') {
                                                        for (const item of gitItems) {
                                                            await addToLibrary({...item, clone_mode: 'read-only'});
                                                        }
                                                    }
                                                    if (cloneMode === '2' || cloneMode === '3') {
                                                        for (const item of gitItems) {
                                                            await addToLibrary({...item, clone_mode: 'writeable'});
                                                        }
                                                    }
                                                }
                                                setSelectedImportItems(new Set());
                                            }}
                                            className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm transition-colors"
                                        >
                                            Add Selected to Library
                                        </button>
                                        <button
                                            onClick={() => setSelectedImportItems(new Set())}
                                            className="text-gray-600 hover:text-gray-800 text-sm"
                                        >
                                            Clear Selection
                                        </button>
                                    </div>
                                )}
                            </div>
                            {importResults.success ? (
                                <div>
                                    <div className="flex items-center gap-2 mb-4 text-sm">
                                        <span className="bg-green-100 text-green-800 px-2 py-1 rounded">
                                            ‚úÖ Success
                                        </span>
                                        <span className="text-gray-600">
                                            Found {importResults.total} items from {importResults.source.toUpperCase()}
                                        </span>
                                    </div>
                                    {importResults.items.length > 0 ? (
                                        <div className="max-h-96 overflow-y-auto">
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                                {importResults.items.filter((item: any) => !libraryItems.has(item.id)).map((item: any, index: number) => {
                                                    const isExpanded = expandedItems.has(item.id);
                                                    const jiraDesc = extractJiraDescription(item);
                                                    return (
                                                        <div
                                                            key={item.id || index}
                                                            onClick={(e) => {
                                                                if (!(e.target as HTMLElement).closest('button')) {
                                                                    const newSelected = new Set(selectedImportItems);
                                                                    if (newSelected.has(item.id)) {
                                                                        newSelected.delete(item.id);
                                                                    } else {
                                                                        newSelected.add(item.id);
                                                                    }
                                                                    setSelectedImportItems(newSelected);
                                                                }
                                                            }}
                                                            className="border rounded-lg p-3 cursor-pointer transition-all"
                                                            style={{
                                                                backgroundColor: selectedImportItems.has(item.id) 
                                                                    ? 'var(--color-primary-alpha)' 
                                                                    : 'var(--color-surface)',
                                                                borderColor: selectedImportItems.has(item.id) 
                                                                    ? 'var(--color-primary)' 
                                                                    : 'var(--color-border)'
                                                            }}
                                                        >
                                                        <div className="flex justify-between items-start mb-2">
                                                            <h5 className="font-medium text-gray-900 text-sm">{item.title}</h5>
                                                            <div className="flex gap-1">
                                                                {item.tags?.slice(0, 3).map((tag: string) => (
                                                                    <span key={tag} className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                                                                        {tag}
                                                                    </span>
                                                                ))}
                                                            </div>
                                                        </div>
                                                        <p className="text-xs text-gray-600 mb-2">{item.preview}</p>
                                                        {/* JIRA Description Expansion */}
                                                        {item.source === 'jira' && jiraDesc && (
                                                            <div className="mb-3">
                                                                <button
                                                                    onClick={() => toggleItemExpansion(item.id)}
                                                                    className="text-xs text-blue-600 hover:text-blue-800 mb-2"
                                                                >
                                                                    {isExpanded ? '‚ñº Hide Details' : '‚ñ∂ Show Details'}
                                                                </button>
                                                                {isExpanded && (
                                                                    <div className="text-xs text-gray-700 bg-gray-50 p-3 rounded border-l-4 border-blue-200">
                                                                        <div className="font-medium mb-2">Description:</div>
                                                                        <div className="whitespace-pre-wrap">{jiraDesc}</div>
                                                                        {item.metadata && (
                                                                            <div className="mt-3 pt-2 border-t border-gray-200">
                                                                                <div className="grid grid-cols-2 gap-2 text-xs">
                                                                                    <div><strong>Status:</strong> {item.metadata.status}</div>
                                                                                    <div><strong>Priority:</strong> {item.metadata.priority}</div>
                                                                                    <div><strong>Assignee:</strong> {item.metadata.assignee}</div>
                                                                                    <div><strong>Updated:</strong> {new Date(item.metadata.updated).toLocaleDateString()}</div>
                                                                                </div>
                                                                            </div>
                                                                        )}
                                                                    </div>
                                                                )}
                                                            </div>
                                                        )}
                                                        {/* Context Options */}
                                                        <div className="flex gap-1 mt-1">
                                                            {item.source === 'git' && (
                                                                <>
                                                                    <span className="text-xs px-1 py-0.5 rounded" style={{
                                                                        backgroundColor: 'var(--color-success-alpha)',
                                                                        color: 'var(--color-success)'
                                                                    }}>
                                                                        Read
                                                                    </span>
                                                                    <span className="text-xs px-1 py-0.5 rounded" style={{
                                                                        backgroundColor: 'var(--color-warning-alpha)',
                                                                        color: 'var(--color-warning)'
                                                                    }}>
                                                                        Write
                                                                    </span>
                                                                </>
                                                            )}
                                                            <button
                                                                onClick={() => {
                                                                    const url = item.metadata?.jira_url ||
                                                                                item.metadata?.html_url ||
                                                                                (item.source === 'git' ? `https://github.com/${item.content?.owner}/${item.content?.repo}/tree/${item.content?.branch || 'main'}` : '');
                                                                    if (url) window.open(url, '_blank');
                                                                }}
                                                                className="text-xs px-1 py-0.5 rounded transition-colors"
                                                                style={{
                                                                    backgroundColor: 'var(--color-surface-elevated)',
                                                                    color: 'var(--color-text-secondary)'
                                                                }}
                                                            >
                                                                Link
                                                            </button>
                                                        </div>
                                                        <div className="text-xs mt-1" style={{ color: 'var(--color-text-muted)' }}>
                                                            {item.source} ‚Ä¢ {Math.round(item.size_bytes / 1024)}KB
                                                        </div>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    ) : (
                                        <div className="text-center py-8 text-gray-500">
                                            {importResults.items.length > 0 && importResults.items.every((item: any) => libraryItems.has(item.id))
                                                ? "All items have been added to library!"
                                                : "No items returned from query"
                                            }
                                        </div>
                                    )}
                                </div>
                            ) : (
                                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                                    <div className="flex items-center gap-2 mb-2">
                                        <span className="bg-red-100 text-red-800 px-2 py-1 rounded text-sm">
                                            Error
                                        </span>
                                    </div>
                                    <p className="text-red-700 text-sm">{importResults.error}</p>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}